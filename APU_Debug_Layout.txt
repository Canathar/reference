



╔═╦═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╦═╗
╠═╬═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╬═╣
║ ║                                                                                                                                                                     ║ ║
║ ║                                                                           ALGO: Connection                                                                          ║ ║
║ ║                                                                                                                                                                     ║ ║
╠═╬═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╬═╣
╚═╩═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╩═╝

╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                            Objects/Functions                                                                            ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

   Function Virtual Table
   ══════════════════════
      - The API virtual table functions are initialized in /algo/algconnection/src/connection_vt.c

      - The API virtual table functions are implemented in /algo/algconnection/src/connection_api.c


   Object
   ══════
      - The connection object is defined by the following structure (/algo/algconnection/include/connection_priv.h):

           typedef struct CONNECTION_Obj
           {
              IALG_Obj             alg;                          // MUST be first field of all CONNECTION objs
              LgInt                maxNumConnection;             // Number of connection supported
              MdUns                connectionCount;              // Connection counter
              os_sem_Struct        ConnListSem;                  // Semaphore, use as mutex to protect connection list
              Conn_t*              ConnPool;                     // Pointer to dynamicaly allocated connection list
              Conn_t*              pFreeConn;                    // Pointer to the first free connection cell. Single linked to other free cell with "next" pointer.
              TSRead_t             ConnectionTimeSlotRead;       // Struct to handle Read TimeSlot feature
              MdUns                TestToneTs;                   // Placeholder of the OUT_CC where to connect 0dBm test tone
              MdUns                TestPatternTs;                // Placeholder of the OUT_CC where to copy the test pattern
              LgInt                LayerSize[NUM_LAYER];         // # of CC in each layer
              LgUns                LayerAddr[NUM_LAYER];         // Base address of each layer audio buffer
              LgUns                LayerSampleSize[NUM_LAYER];   // Sample size (in byte) of each layer
              LgUns                MidLayerSizeByte;             // Size in byte of all middle audio buffer (all except IN & OUT), for all CC and
                                                                 //    MAX_NUM_SAMPLES_PER_TIMESLOT deep.
              LgUns                OutLayerSizeByte;             // Size in byte of output audio buffer, for all CC and MAX_NUM_SAMPLES_PER_TIMESLOT deep.

              Conn_t*              pConnListHead[NUM_LAYER];     // Pointer to the first connection of each destination layer.
                                                                 //    Since IN layer can't be a destination, pConnListHead[0] point to the very first connection,
                                                                 //    no matter the layer of it.
              Conn_t*              pConnListTail[NUM_LAYER];     // Pointer to the last connection of each destination layer.
                                                                 //    Since IN layer can't be a destination, pConnListTail[0] point to the very last connection,
                                                                 //    no matter the layer of it.
           #ifdef USE_EDMA_MEMSET
              EDMAMEM_HANDLE       hEdmaMemset;
           #endif
           } CONNECTION_Obj;


   Object Collection
   ═════════════════
      - The connection object collection is defined by the following structure (/algo/algconnection/include/connection_priv.h):

           typedef struct Conn_s
           {
              struct Conn_s*       next;
              struct Conn_s*       prev;
              LgInt                index;
              BufferList           SrcLayer;
              LgUns                SrcTS;
              BufferList           DstLayer;
              LgUns                DstTS;
              MdInt                Gain;
              MdInt                currentGain;
              LgInt                GaindB;
              Bool                 Sub;
              Bool                 VolumeCtrl;
              CONNECT              *doConnect;
              void*                pSrc;
              void*                pDst;
              SmUns                RT_Group_LogicBox;
           } Conn_t;



╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                  Debug                                                                                  ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

   Print All Connections
   ═════════════════════
      - From the APU Debug Menu, enter "cm p"

      - The following algo function tree is called:

           CONNECTION_ConsoleCmdHandler (defined in vt)
              CONNECTION_print (defined in /algo/algconnection/src/connection_api.c)
                 DebugConnectionPrint

      - The entire connection list is output (Raw Example Shown Below):

           Connection list (105 Connections)
           =====================================
            0-002 => 1-001   0.0dB (0x0800) (current:2048)                 (idx:64) 255
            0-000 => 1-001   0.0dB (0x0800) (current:2048)                 (idx:55) 255
            0-008 => 1-001   0.0dB (0x0800) (current:2048)                 (idx:9) 255

      - Annotated from source code:

           Connection list (105 Connections)
           =====================================
           srclayer - srcts => dstlayer - dstts

              0     -  002  =>    1     -  001   0.0dB (0x0800) (current:2048)                 (idx:64) 255




                 Src       Dest         Gain           Cur Gain     sub  vc    idx     LB
               -------    ------- ------------------- ------------ ---- ---- -------- ----
   ConPrintf(" %d-%03d => %d-%03d %3d.%01ddB (0x%04x) (current:%d) %07s %07s (idx:%d) %d\n",

                  tmpConn->SrcLayer,
                  tmpConn->SrcTS,

                  tmpConn->DstLayer,
                  tmpConn->DstTS,

                  tmpConn->GaindB/10,
                  abs(tmpConn->GaindB%10),

                  tmpConn->Gain,

                  tmpConn->currentGain,

                  (tmpConn->Sub?"sub":"   "),
                  (tmpConn->VolumeCtrl?"volCtrl":" "),
                  tmpConn->index,
                  tmpConn->RT_Group_LogicBox);





╔═╦═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╦═╗
╠═╬═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╬═╣
║ ║                                                                                                                                                                     ║ ║
║ ║                                                                          ALGO: Media Service                                                                        ║ ║
║ ║                                                                                                                                                                     ║ ║
╠═╬═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╬═╣
╚═╩═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╩═╝







╔═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗
║                                                                                  Debug                                                                                  ║
╚═════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝

   Print All Connections
   ═════════════════════
      - From the APU Debug Menu, enter "ms p"

      - The following algo function tree is called:

           MediaService_ConsoleCmdHandler (defined in vt)





     Show the status of all the media service logs

      ms log

      ms p

      ms rtpls <socket number>

      ms rtpl by itself will toggle all on or all off



      - The host debug console message processing is defined in the function thrComm in /common/src/thrcomm.c

           MsgBasedConsole

              CWP
                 MsgBasedConsole (msg tagged as 'TCIPC_REDIRECTED_TELNET_CONSOLE_INPUT')   in /src/telnetconsleproxy.c
                    SendConsoleIpcCmd in /src/telnetconsleproxy.c

                 ConsoleCmdThread in /src/telnetconsleproxy.c




              XMG: MsgBasedConsole in /common/src/telnetconsole.c

